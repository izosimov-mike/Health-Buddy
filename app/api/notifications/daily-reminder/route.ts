import { NextRequest, NextResponse } from 'next/server';
import { NeynarAPIClient, Configuration } from '@neynar/nodejs-sdk';

export async function GET(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ cron job
  const authHeader = request.headers.get('authorization');
  if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Neynar SDK v3
    const config = new Configuration({
      apiKey: process.env.NEYNAR_API_KEY!,
      baseOptions: {
        headers: {
          "x-neynar-experimental": true,
        },
      },
    });
    const client = new NeynarAPIClient(config);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FID 507376
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º publishFrameNotifications - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Mini-App —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
    
    await client.publishFrameNotifications({
      targetFids: [507376], // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      notification: {
        title: "Daily health activities reminder",
        body: "Don't forget to log your daily health activities! üí™",
        target_url: "https://health-buddy-seven.vercel.app/"
      }
    });
    
    console.log(`üì¢ Daily reminder sent to user FID 507376 via publishFrameNotifications`);
    console.log(`Notification ID: daily-reminder-${today}`);

    return NextResponse.json({ 
      success: true, 
      message: 'Daily reminder sent successfully via publishFrameNotifications',
      targetFid: 507376,
      method: 'publishFrameNotifications',
      notificationId: `daily-reminder-${today}`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error sending notification:', error);
    
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç signer UUID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
    if (errorMessage.includes('signer') || errorMessage.includes('PaymentRequired')) {
      return NextResponse.json(
        { 
          error: 'NEYNAR_SIGNER_UUID required. Please create a signer in Neynar dashboard or upgrade to paid plan.',
          details: 'Visit https://neynar.com/dashboard to create a signer or upgrade your plan.'
        }, 
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: 'Failed to send notification', details: errorMessage }, 
      { status: 500 }
    );
  }
}