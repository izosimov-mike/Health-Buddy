// Script to test local API endpoints
const http = require('http');

const LOCAL_URL = 'http://localhost:3000';

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testAPIs() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
  console.log('=' .repeat(50));
  
  try {
    // Test database health
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    const healthResponse = await makeRequest('/api/health');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${healthResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, healthResponse.data);
    
    // Test database seeding
    console.log('\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    const seedResponse = await makeRequest('/api/seed');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${seedResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, seedResponse.data);
    
    // Test users API
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const usersResponse = await makeRequest('/api/users');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${usersResponse.status}`);
    if (usersResponse.status === 200) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResponse.data.length}`);
    } else {
      console.log(`   –û—à–∏–±–∫–∞:`, usersResponse.data);
    }
    
    // Test categories API
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
    const categoriesResponse = await makeRequest('/api/categories');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${categoriesResponse.status}`);
    if (categoriesResponse.status === 200) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesResponse.data.length}`);
    } else {
      console.log(`   –û—à–∏–±–∫–∞:`, categoriesResponse.data);
    }
    
    // Test actions API
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–µ–π—Å—Ç–≤–∏–π:');
    const actionsResponse = await makeRequest('/api/actions');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${actionsResponse.status}`);
    if (actionsResponse.status === 200) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: ${actionsResponse.data.length}`);
    } else {
      console.log(`   –û—à–∏–±–∫–∞:`, actionsResponse.data);
    }
    
    // Test stats API
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
    const statsResponse = await makeRequest('/api/stats');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${statsResponse.status}`);
    if (statsResponse.status === 200) {
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${statsResponse.data.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${statsResponse.data.level || 0}`);
      console.log(`   –û—á–∫–∏: ${statsResponse.data.globalScore || 0}`);
    } else {
      console.log(`   –û—à–∏–±–∫–∞:`, statsResponse.data);
    }
    
    console.log('\n' + '=' .repeat(50));
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// Run the tests
testAPIs();